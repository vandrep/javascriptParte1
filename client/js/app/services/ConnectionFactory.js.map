{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;;AAEA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAa;AAAA;;AACT,cAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;wCAEqB;AAClB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAI;AAC9BT,sCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,aAAI;AACxB,wBAAG,CAAChB,UAAJ,EAAe;AACXA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAU;AACzB,kCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGH;AACDE,4BAAQL,UAAR;AACH,iBATD;;AAWAO,4BAAYW,OAAZ,GAAsB,aAAI;AACtBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAJD;AAMH,aAxBM,CAAP;AAyBH;;;sCAEoBtB,U,EAAW;AAC5BH,mBAAO0B,OAAP,CAAe,iBAAO;AAClB,oBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,aAHD;AAIH;;;0CAEuB;AACpB,gBAAG7B,UAAH,EAAc;AACVC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\r\nconst version = 4;\r\nconst dbName = \"aluraframe\"\r\n\r\nlet connection = null;\r\n\r\nlet close = null;\r\n\r\nexport class ConnectionFactory{\r\n\r\n    constructor(){\r\n        throw new Error(\"Não é possível criar instâncias de ConnectionFactory\");\r\n    }\r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject) =>{\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e =>{\r\n                ConnectionFactory._createStores(e.target.result);\r\n            }  \r\n\r\n            openRequest.onsuccess = e =>{\r\n                if(!connection){\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function(){\r\n                        throw new Error(\"Você não pode fechar diretamente a conexão\");\r\n                    };\r\n                }\r\n                resolve(connection);\r\n            }\r\n            \r\n            openRequest.onerror = e =>{\r\n                console.log(e.target.error);\r\n                \r\n                reject(e.target.error.name);\r\n            }\r\n            \r\n        });\r\n    }\r\n    \r\n    static _createStores(connection){\r\n        stores.forEach(store=>{\r\n            if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store)    \r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        })      \r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}